apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: groom-app
  name: groom
  namespace: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: groom-app
  template:
    metadata:
      labels:
        app: groom-app
    spec:
      serviceAccountName: groom-sa
      containers:
        - image: {{ .Values.imagegroom.repository }}:{{ .Values.imagegroom.tag }}
          imagePullPolicy: {{ .Values.imagegroom.pullPolicy }}
          name: groom
          tty: true # this is required for tty2web to work
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.groomPort }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
          ports: 
            - protocol: "TCP"
              name: groom-port
              containerPort: {{ .Values.groomPort }}
          # add debug config if needed
          {{ if .Values.debugGroom }}
            - name: debug-groomp
              protocol: "TCP"
              containerPort: {{ .Values.debugGroomPort }}
          workingDir: /go/src
          # make container sleep, use kubectl exec to start debuger later
          # then in pod # /dlv debug /go/src/cmd/groom --headless --listen=:8229 --api-version=2 -- http://fake.domain
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          resources:
            requests:
              cpu: 50m
              memory: 2000Mi
            limits:
              cpu: 4
              memory: 2000Mi
          volumeMounts:
            - mountPath: "/go/src"
              name: go-volume
      volumes:
        - name: go-volume
          persistentVolumeClaim:
            claimName: go-pvc
          # otherwise apply security
          {{ else }}
          command: [ "/groom-clients.sh" ]
          args: [ "{{ .Values.groomPort }}" ]
          securityContext:
            # capabilities:
            #   drop:
            #     - all
            # readOnlyRootFilesystem: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          # automountServiceAccountToken: false
          resources:
            requests:
              cpu: 500m
              memory: 200Mi
            limits:
              cpu: 1
              memory: 200Mi
          {{ end }}